
import React, { useState } from 'react';
import { GoogleGenAI, Modality } from '@google/genai';
import Card from './ui/Card';
import Button from './ui/Button';

const NanoBanana: React.FC = () => {
  const [prompt, setPrompt] = useState('A golden retriever wearing sunglasses, photorealistic.');
  const [generatedImage, setGeneratedImage] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleGenerate = async () => {
    if (!prompt.trim()) {
      setError('Please enter a prompt.');
      return;
    }
    setIsLoading(true);
    setError(null);
    setGeneratedImage(null);

    try {
      const ai = new GoogleGenAI({ apiKey: process.env.API_KEY as string });
      const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash-image',
        contents: {
          parts: [{ text: prompt }],
        },
        config: {
          responseModalities: [Modality.IMAGE],
        },
      });

      const firstPart = response.candidates?.[0]?.content?.parts?.[0];
      if (firstPart && 'inlineData' in firstPart && firstPart.inlineData) {
        const base64ImageBytes: string = firstPart.inlineData.data;
        const imageUrl = `data:${firstPart.inlineData.mimeType};base64,${base64ImageBytes}`;
        setGeneratedImage(imageUrl);
      } else {
        throw new Error("No image data returned from API. The model may have refused the prompt.");
      }
    } catch (e: any) {
      if (e.message?.includes("Requested entity was not found")) {
        setError("API Key error or model access issue. Please check your API key.");
      } else {
        setError(e.message || 'Failed to generate image. Please try again.');
      }
      console.error(e);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Card>
      <div className="flex flex-col gap-6">
        <h2 className="text-2xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-indigo-600">Nano Banana Generator</h2>
        <p className="text-gray-400 -mt-4">Fast image generation with Gemini 2.5 Flash Image.</p>
        <div className="flex flex-col gap-4">
          <textarea
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            placeholder="Describe the image you want to create..."
            className="w-full bg-gray-700 text-gray-200 rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-indigo-500 border border-gray-600 h-24 resize-none"
            disabled={isLoading}
          />
          <Button onClick={handleGenerate} isLoading={isLoading} className="self-start">
            Generate
          </Button>
        </div>
        {error && <p className="text-red-400 text-sm mt-2">{error}</p>}
        <div className="mt-4 p-4 bg-gray-900 rounded-lg min-h-[300px] flex items-center justify-center">
          {isLoading ? (
            <div className="text-center">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-400 mx-auto"></div>
                <p className="mt-4 text-gray-400">Summoning the Nano Banana...</p>
            </div>
          ) : generatedImage ? (
            <img src={generatedImage} alt="Generated by Nano Banana" className="max-w-full max-h-[50vh] rounded-md shadow-lg" />
          ) : (
            <p className="text-gray-500">Your generated image will appear here.</p>
          )}
        </div>
      </div>
    </Card>
  );
};

export default NanoBanana;
